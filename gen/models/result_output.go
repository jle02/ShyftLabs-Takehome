// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultOutput result output
//
// swagger:model resultOutput
type ResultOutput struct {

	// course Id
	CourseID int64 `json:"courseId,omitempty"`

	// course name
	// Required: true
	// Min Length: 1
	CourseName *string `json:"courseName"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// score
	Score ScoreEnum `json:"score,omitempty"`

	// student Id
	StudentID int64 `json:"studentId,omitempty"`

	// student name
	// Required: true
	// Min Length: 1
	StudentName *string `json:"studentName"`
}

// Validate validates this result output
func (m *ResultOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCourseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudentName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultOutput) validateCourseName(formats strfmt.Registry) error {

	if err := validate.Required("courseName", "body", m.CourseName); err != nil {
		return err
	}

	if err := validate.MinLength("courseName", "body", *m.CourseName, 1); err != nil {
		return err
	}

	return nil
}

func (m *ResultOutput) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if err := m.Score.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("score")
		}
		return err
	}

	return nil
}

func (m *ResultOutput) validateStudentName(formats strfmt.Registry) error {

	if err := validate.Required("studentName", "body", m.StudentName); err != nil {
		return err
	}

	if err := validate.MinLength("studentName", "body", *m.StudentName, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this result output based on the context it is used
func (m *ResultOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultOutput) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ResultOutput) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Score.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("score")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultOutput) UnmarshalBinary(b []byte) error {
	var res ResultOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
