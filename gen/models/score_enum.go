// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScoreEnum score enum
//
// swagger:model scoreEnum
type ScoreEnum string

func NewScoreEnum(value ScoreEnum) *ScoreEnum {
	v := value
	return &v
}

const (

	// ScoreEnumA captures enum value "A"
	ScoreEnumA ScoreEnum = "A"

	// ScoreEnumB captures enum value "B"
	ScoreEnumB ScoreEnum = "B"

	// ScoreEnumC captures enum value "C"
	ScoreEnumC ScoreEnum = "C"

	// ScoreEnumD captures enum value "D"
	ScoreEnumD ScoreEnum = "D"

	// ScoreEnumE captures enum value "E"
	ScoreEnumE ScoreEnum = "E"
)

// for schema
var scoreEnumEnum []interface{}

func init() {
	var res []ScoreEnum
	if err := json.Unmarshal([]byte(`["A","B","C","D","E"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scoreEnumEnum = append(scoreEnumEnum, v)
	}
}

func (m ScoreEnum) validateScoreEnumEnum(path, location string, value ScoreEnum) error {
	if err := validate.EnumCase(path, location, value, scoreEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this score enum
func (m ScoreEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScoreEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this score enum based on context it is used
func (m ScoreEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
