// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StudentOutput student output
//
// swagger:model studentOutput
type StudentOutput struct {

	// date of birth
	// Required: true
	// Format: date
	DateOfBirth *strfmt.Date `json:"dateOfBirth"`

	// email address
	// Example: user@example.com
	// Required: true
	// Format: email
	EmailAddress *strfmt.Email `json:"emailAddress"`

	// family name
	// Required: true
	// Min Length: 1
	FamilyName *string `json:"familyName"`

	// first name
	// Required: true
	// Min Length: 1
	FirstName *string `json:"firstName"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`
}

// Validate validates this student output
func (m *StudentOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StudentOutput) validateDateOfBirth(formats strfmt.Registry) error {

	if err := validate.Required("dateOfBirth", "body", m.DateOfBirth); err != nil {
		return err
	}

	if err := validate.FormatOf("dateOfBirth", "body", "date", m.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StudentOutput) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("emailAddress", "body", m.EmailAddress); err != nil {
		return err
	}

	if err := validate.FormatOf("emailAddress", "body", "email", m.EmailAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StudentOutput) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("familyName", "body", m.FamilyName); err != nil {
		return err
	}

	if err := validate.MinLength("familyName", "body", *m.FamilyName, 1); err != nil {
		return err
	}

	return nil
}

func (m *StudentOutput) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MinLength("firstName", "body", *m.FirstName, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this student output based on the context it is used
func (m *StudentOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StudentOutput) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StudentOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StudentOutput) UnmarshalBinary(b []byte) error {
	var res StudentOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
