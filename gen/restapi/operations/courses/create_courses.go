// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCoursesHandlerFunc turns a function with the right signature into a create courses handler
type CreateCoursesHandlerFunc func(CreateCoursesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoursesHandlerFunc) Handle(params CreateCoursesParams) middleware.Responder {
	return fn(params)
}

// CreateCoursesHandler interface for that can handle valid create courses params
type CreateCoursesHandler interface {
	Handle(CreateCoursesParams) middleware.Responder
}

// NewCreateCourses creates a new http.Handler for the create courses operation
func NewCreateCourses(ctx *middleware.Context, handler CreateCoursesHandler) *CreateCourses {
	return &CreateCourses{Context: ctx, Handler: handler}
}

/* CreateCourses swagger:route POST /courses courses createCourses

CreateCourses create courses API

*/
type CreateCourses struct {
	Context *middleware.Context
	Handler CreateCoursesHandler
}

func (o *CreateCourses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCoursesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
